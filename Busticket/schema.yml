openapi: 3.0.3
info:
  title: Bus Ticket Booking API
  version: 1.0.0
  description: An API for booking and managing bus tickets, including routes, seats,
    bookings, and users.
paths:
  /api/bookings/{booking_id}/cancel/:
    post:
      operationId: api_bookings_cancel_create
      parameters:
      - in: path
        name: booking_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/bookings/history/:
    get:
      operationId: api_bookings_history_list
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
          description: ''
  /api/bus/book/:
    post:
      operationId: api_bus_book_create
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/bus/create/:
    post:
      operationId: api_bus_create_create
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/bus/search/:
    get:
      operationId: api_bus_search_retrieve
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/bus/seat-layout/{schedule_id}:
    get:
      operationId: api_bus_seat_layout_retrieve
      parameters:
      - in: path
        name: schedule_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/login/:
    post:
      operationId: api_login_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
          description: ''
  /api/profile/:
    get:
      operationId: api_profile_retrieve
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: api_profile_update
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/register/:
    post:
      operationId: api_register_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
          description: ''
  /api/schedule/create/:
    post:
      operationId: api_schedule_create_create
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
components:
  schemas:
    Booking:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        passenger:
          type: integer
          readOnly: true
        bus:
          type: integer
        schedule:
          type: integer
        seat_numbers: {}
        total_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        booking_time:
          type: string
          format: date-time
          readOnly: true
      required:
      - booking_time
      - bus
      - id
      - passenger
      - schedule
      - seat_numbers
      - total_amount
    Login:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          writeOnly: true
      required:
      - password
      - username
    Register:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        password:
          type: string
          maxLength: 128
        role:
          $ref: '#/components/schemas/RoleEnum'
      required:
      - password
      - username
    RoleEnum:
      enum:
      - admin
      - passenger
      type: string
      description: |-
        * `admin` - Admin
        * `passenger` - Passenger
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
